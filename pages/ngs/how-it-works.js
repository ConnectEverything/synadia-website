import React from 'react';
import Header from '../../components/Header';
import CopyCode from '../../components/CopyCode';
import Footer from '../../components/Footer';

export default class Pricing extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <main>
        <Header internal />
        <section>
          <h2>How it works/FAQ</h2>

          <h3 className="inner">NKeys</h3>

          <p>
            Before starting the signup process, here is a brief note about
            NKeys. NGS uses a security mechanism where you do not give the
            system your private keys, only public keys. The keys are an encoded
            form of ED25519 key used to represent identities in NATS, known as
            nkeys. The Nkey seeds generated by the signup process are{' '}
            <span className="highlight">SECRET</span>. Do not share them with
            anyone you do not trust, they are yours and yours alone. If you lose
            them, you will lose access to your NGS account, so be sure to back
            them up in a secure place.
          </p>

          <h3 className="inner">Creating Users</h3>

          <p>
            You can add users to your account through{' '}
            <span className="highlight">ngs add user</span> command.
          </p>

          <CopyCode content='$ ngs add user --name bob Generated user key - private key stored "/Users/admin/.nkeys/myproject/accounts/myproject_account/users/bob.nk"' />

          <p>
            When you create a user, an nkey is generated to represent that user
            in NATS, which you’ll use in credentials when you connect. The user
            will be added to the default global account unless specified
            otherwise - you can setup permissions for a user, specify a
            particular account to which the user belongs, activation time,
            expiration time, and others. For more information, use the{' '}
            <span className="highlight">ngs add user --help</span> command.
          </p>

          <h3 className="inner">Exports</h3>

          <p>
            NGS allows you to export data to accounts under other NGS
            subscriptions.
          </p>

          <h3 className="inner">Streams</h3>

          <CopyCode content='$ ngs add export --account myaccount --subject "weather.CA"' />

          <p>
            This updates and uploads your token. If you publish messages to the
            “weather.CA” subject, any other NGS customer who has imported
            “weather.CA” can consume those messages.
          </p>

          <h3 className="inner">Services</h3>

          <CopyCode content='$ ngs add export --service --account myaccount --name iplocater --subject "ip.geo"' />

          <p>
            This exposes a service for other NGS customers to import, allowing
            you to share valuable information and software services.
          </p>

          <p>
            To generate an activation token for a private export … this will
            automatically upload the token to NGS so that the user can use a URL
            instead of the raw token. You can update the token without the url
            changing …
          </p>

          <p>Something about revoking activation tokens...</p>

          <p>
            There are more options for exporting streams and services, see{' '}
            <span className="highlight">ngs add export --help</span> for more
            information.
          </p>

          <h3 className="inner">Imports</h3>

          <p>
            On paid plans, you can Import a stream or service. This is
            accomplished through the{' '}
            <span className="highlight">ngs add import</span>. You’ll specify a
            token file generated by an export.
          </p>

          <CopyCode content="$ ngs add import" />

          <h3 className="inner">Other NGS Commands</h3>

          <p>
            The <span className="highlight">ngs</span> utility can be used to
            add, remove, and edit users, imports, and exports. See{' '}
            <span className="highlight">ngs --help</span> for more information.
            Note that while NGS is a general NATS utility, only commands related
            to signup, users, import, and exports will be supported on the
            Synadia operated global digital network.
          </p>

          <h3 className="inner">Connecting a Client</h3>

          <p>
            Supported Clients use the standard NATS APIs, except there is a new
            credentials option available to connect with and accept a JWT and
            NKey. This option must be used to connect to NGS.
          </p>

          <CopyCode
            content="nc, err := Connect(url, UserCredentials(
              “./accounts/myaccount/bob.jwt”,
              ”~/.nkeys/accounts/myaccount/users/bob.nk”
              ))"
          />
        </section>

        <Footer simple />
        <style jsx>{`
          main {
            padding-top: 25vh;
            position: relative;
            background-image: url('/static/images/bg.png');
            background-repeat: no-repeat;
            background-size: contain;
            background-position: 50% 2%;
          }

          section {
            max-width: 1280px;
            margin: 0 auto;
            padding: 2rem;
          }

          h2 {
            margin-top: -1em;
            margin-bottom: 2em;
          }

          p,
          h2,
          h3 {
            display: block;
            text-align: left;
            max-width: none;
          }

          h3.inner {
            font-weight: 600;
            color: var(--color-secondary);
            margin-top: 2em;
          }

          p {
            font-size: 1.25rem;
          }

          p:last-of-type {
            margin-bottom: 8rem;
          }

          .highlight {
            color: var(--color-secondary);
          }

          code {
            display: block;
            padding: 1.2em 1.3em;
            background-color: #1a1c1d;
            color: var(--color-secondary);
          }

          @media (min-width: 1024px) {
            code {
              width: 60%;
            }
          }
        `}</style>
      </main>
    );
  }
}
